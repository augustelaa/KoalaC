package Compiladores_Backend;

public interface ParserConstants
{
    int START_SYMBOL = 43;

    int FIRST_NON_TERMINAL    = 43;
    int FIRST_SEMANTIC_ACTION = 90;

    int[][] PARSER_TABLE =
    {
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  2, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1,  6,  6,  6,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1,  9, 10, 11, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  8, -1, -1, -1,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 14, 14, 14, 14, 14, -1, -1, -1, 14, -1, -1, -1, 14, -1, -1, 14, 14, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 15, 15, 15, 15, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 18, 18, 18, 18, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, 21, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, 24, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 26, 26, 26, 26, 26, -1, -1, -1, 26, -1, -1, -1, 26, -1, -1, 26, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 29, 29, 29, 29, 29, -1, -1, -1, 30, -1, -1, -1, 31, -1, -1, 33, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 28, 28, 28, 28, 28, -1, -1, -1, 28, -1, -1, -1, 28, -1, -1, 28, 28, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 55, 55, 55, 55, 55, 55, 55, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, -1, 55, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, -1, 54, -1, 54, -1, 54, 52, 53, -1, -1, -1, 54, 54, 54, 54, 54, 54, -1, 54, 54 },
        { -1, -1, 59, 59, 59, 59, 59, 60, 61, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, -1, 64, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, -1, 58, -1, 58, -1, 58, 58, 58, 56, 57, -1, 58, 58, 58, 58, 58, 58, -1, 58, 58 },
        { -1, -1, 42, 42, 42, 42, 42, 42, 42, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, 42, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 51, 51, 51, 51, 51, 51, 51, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, -1, 51, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, 44, -1, 44, -1, 44, -1, -1, -1, -1, -1, 43, 43, 43, 43, 43, 43, -1, 44, 44 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, 46, 47, 48, 49, 50, -1, -1, -1 },
        { -1, -1, 34, 34, 34, 34, 34, 34, 34, 34, -1, -1, -1, -1, -1, 34, -1, -1, -1, 34, -1, -1, -1, -1, -1, -1, 34, -1, 34, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, -1, 37, -1, 37, -1, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, 36 },
        { -1, -1, 38, 38, 38, 38, 38, 38, 38, 38, -1, -1, -1, -1, -1, 39, -1, -1, -1, 40, -1, -1, -1, -1, -1, -1, 38, -1, 38, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 66, 66, 66, 66, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 67, 67, 67, 67, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 81, -1, -1, -1, -1, -1, 80, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 73, 74, 75, 76, 77, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 69, 70, -1, 70, 68, 70, -1, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, -1, 70, 70 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 71, 72, -1, 72, -1, 72, -1, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, -1, 72, 72 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 79, 79, 79, 79, 79, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 82, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 83, 83, 83, 83, 83, 83, 83, 83, -1, -1, -1, -1, -1, 83, -1, -1, -1, 83, -1, -1, -1, -1, -1, -1, 83, -1, 83, 83, -1, -1, -1, -1, -1, -1, -1, -1, -1, 83, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 85, -1, -1, -1, -1, -1, 84, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 86, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 88, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 87, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 89, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 91, 90, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
    };

    int[][] PRODUCTIONS = 
    {
        { 105, 106,  44,  14,  25,  50,  58,  26, 107 },
        {  17,  25,  45,  26 },
        {   0 },
        {   7,  23,  25,  47,  26,  24,  46 },
        {   0 },
        {  45 },
        {  48,  49 },
        {   0 },
        {  22,  47 },
        {   3 },
        {   4 },
        {   5 },
        {   6 },
        {  23,  51,  24 },
        {   0 },
        {  52,  53 },
        {   0 },
        {  22,  51 },
        {  54, 121 },
        {  56 },
        {  48, 120, 122,  55 },
        {   0 },
        {  25,   8, 126,  26 },
        {   7,  25,  57 },
        {   7,  26 },
        {   8,  22,   7,  26 },
        {  59,  24,  60 },
        {   0 },
        {  58 },
        {  75 },
        {  81 },
        {  83 },
        {  86 },
        {  88 },
        {  73,  72 },
        {  41,  73, 108,  72 },
        {  42,  73, 109,  72 },
        {   0 },
        {  67 },
        {  16, 101 },
        {  20, 102 },
        {  40,  73, 103 },
        {  68,  69 },
        {  70,  99,  68, 100 },
        {   0 },
        {  34 },
        {  35 },
        {  36 },
        {  37 },
        {  38 },
        {  39 },
        {  61,  63 },
        {  29,  61,  91,  63 },
        {  30,  61,  92,  63 },
        {   0 },
        {  64,  66 },
        {  31,  64,  93,  66 },
        {  32,  64,  94,  66 },
        {   0 },
        {  76, 123 },
        {   8,  95 },
        {   9,  96 },
        {  10, 110 },
        {  27,  71,  28 },
        {  29,  64,  97 },
        {  30,  64,  98 },
        {  76,  33,  71, 124 },
        {  78, 122,  79 },
        { 127,  25,  71,  26, 128,  80 },
        {  21,  48 },
        {   0 },
        {  21,  48 },
        {   0 },
        {   3 },
        {   4 },
        {   5 },
        {   6 },
        {   7 },
        {  11,  27,  82, 125,  28 },
        {  76,  77 },
        {   0 },
        {  22,  82 },
        {  15,  27,  84,  28 },
        {  71, 104,  85 },
        {   0 },
        {  22,  84 },
        {  19,  27,  71,  28, 129,  13,  25,  58,  26,  87, 130 },
        {   0 },
        { 131,  12,  25,  58,  26 },
        { 132,  18,  27,  71,  28,  89, 134 },
        {  13, 133,  25,  58,  26 },
        {  12, 133,  25,  58,  26 }
    };


    String[] PARSER_ERROR =
    {
        "",
        "esperado fim de arquivo", //"Era esperado fim de programa",
        "esperado palavra", //"Era esperado palavra",
        "esperado identificador inteiro", //"Era esperado identificadorInt",
        "esperado identificador float", //"Era esperado identificadorFloat",
        "esperado identificador string", //"Era esperado identificadorString",
        "esperado identificador booleano", //"Era esperado identificadorBool",
        "esperado identificador composto", //"Era esperado identificadorComposto",
        "esperado constante inteira", //"Era esperado constanteInt",
        "esperado constante float", //"Era esperado constanteFloat",
        "esperado constante string", //"Era esperado constanteString",
        "esperado input", //"Era esperado input",
        "esperado isfalsedo", //"Era esperado isfalsedo",
        "esperado istruedo", //"Era esperado istruedo",
        "esperado main", //"Era esperado main",
        "esperado output", //"Era esperado output",
        "esperado true", //"Era esperado true",
        "esperado types", //"Era esperado types",
        "esperado while", //"Era esperado while",
        "esperado if", //"Era esperado if",
        "esperado false", //"Era esperado false",
        "esperado .", //"Era esperado \".\"",
        "esperado ,", //"Era esperado \",\"",
        "esperado :", //"Era esperado \":\"",
        "esperado ;", //"Era esperado \";\"",
        "esperado [", //"Era esperado \"[\"",
        "esperado ]", //"Era esperado \"]\"",
        "esperado (", //"Era esperado \"(\"",
        "esperado )", //"Era esperado \")\"",
        "esperado +", //"Era esperado \"+\"",
        "esperado -", //"Era esperado \"-\"",
        "esperado *", //"Era esperado \"*\"",
        "esperado /", //"Era esperado \"/\"",
        "esperado =", //"Era esperado \"=\"",
        "esperado ==", //"Era esperado \"==\"",
        "esperado !=", //"Era esperado \"!=\"",
        "esperado <", //"Era esperado \"<\"",
        "esperado <=", //"Era esperado \"<=\"",
        "esperado >", //"Era esperado \">\"",
        "esperado >=", //"Era esperado \">=\"",
        "esperado !", //"Era esperado \"!\"",
        "esperado &&", //"Era esperado \"&&\"",
        "esperado ||", //"Era esperado \"||\"",
        "esperado main  types", //"<programa> inválido",
        "esperado main  types", //"<tipos> inválido",
        "esperado identificador", //""<rpt_tipos> inválido",
        "esperado identificador  ]", //"<rpt_tipos1> inválido",
        "esperado identificador (de int, float, bool ou string)", //"<lista_de_campos> inválido",
        "esperado identificador (de int, float, bool ou string)", //"<campo> inválido",
        "esperado ,  ]", //"<campo1> inválido",
        "esperado identificador  input  output  while  if  :", //"<variaveis> inválido",
        "esperado identificador", //"<rpt_variaveis> inválido",
        "esperado identificador", //"<variavel_dec> inválido",
        "esperado ,  ;", //"<variavel_dec1> inválido",
        "esperado identificador (de int, float, bool ou string)", //"<id_de_tipo_simples> inválido",
        "esperado ,  ;  [", //"<campo2> inválido",
        "esperado ,  ;  [", //"<id_de_tipo_composto> inválido",
        "esperado identificador  constante inteira", //"<id_de_tipo_composto1> inválido",
        "esperado identificador  input  output  while  if", //"<rpt_cmd> inválido",
        "esperado identificador  input  output  while  if", //"<comando> inválido",
        "esperado identificador  input  output  while  if  ]", //"<comando1> inválido",
        "esperada expressão", //"<termo> inválido",
        "esperado ?", //"<termo01> inválido", // lixo
        "esperada expressão", //"<aritmetica1> inválido",
        "esperada expressão", //"<fator> inválido",
        "esperado ?", //"<fator1> inválido", // lixo
        "esperada expressão", //"<termo1> inválido",
        "esperada expressão", //"<relacional> inválido",
        "esperada expressão", //"<aritmetica> inválido",
        "esperada expressão", //"<aritmetica01> inválido",
        "esperada expressão", //"<operador_relacional> inválido",
        "esperada expressão", //"<expressao> inválido",
        "esperada expressão", //"<expressao1> inválido",
        "esperada expressão", //"<elemento> inválido",
        "esperado ?", //"<elemento1> inválido", // lixo
        "esperado identificador", //"<cdm_atribuicao> inválido",
        "esperado identificador ", //"<variavel_uso> inválido",
        "esperado ,  )", //"<variavel_uso1> inválido",
        "esperado identificador", //"<identificador> inválido",
        "esperado .  ,  ;  [  ]  )  +", //"<identificador1> inválido", ??????????????
        "esperado .  ,  :  ;  [  ]  +", //"<identificador2> inválido", ??????????????
        "esperado input", //"<cdm_entrada> inválido",
        "esperado identificador", //"<lista_de_identificadores> inválido",
        "esperado output", //"<cdm_saida> inválido",
        "esperada expressão", //"<lista_de_expressoes> inválido",
        "esperado ,  )", //"<expressao2> inválido",
        "esperado if", //"<cdm_selecao> inválido",
        "esperado isFalseDo  ;", //"<cdm_selecao1> inválido",
        "esperado while", //"<cdm_repeticao> inválido",
        "esperado isFalseDo  isTrueDo", //"<cdm_repeticao1> inválido"
    };
}
